{"version":3,"sources":["components/Slider/index.js","App.js","serviceWorker.js","index.js"],"names":["data","image","info","Slider","useState","selectedIndex","setSelectedIndex","changeSlideTo","slider","index","activeSlideIndex","newIndex","sliderElement","document","querySelectorAll","prevPos","currPos","options","iterations","duration","fill","easing","keyframes","transform","forEach","el","animate","animateSlider","className","map","item","i","key","onClick","selectedItem","showArrows","showStatus","showIndicators","showThumbs","dynamicHeight","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAKMA,EAAO,CACT,CACIC,MAAO,kDACPC,KAAM,OAEV,CACID,MAAO,kDACPC,KAAM,OAEV,CACID,MAAO,kDACPC,KAAM,SAEV,CACID,MAAO,kDACPC,KAAM,UAEV,CACID,MAAO,kDACPC,KAAM,WAiECC,EA7DA,WAAO,IAAD,EACyBC,mBAAS,GADlC,mBACVC,EADU,KACKC,EADL,KAqBXC,EAAgB,SAACC,EAAQC,IAlBT,SAACC,EAAkBC,GACrC,IAAMC,EAAgBC,SAASC,iBAAiB,qBAC1CC,EAAUL,EAAmB,EAC7BM,EAAUL,EAAW,EACrBM,EAAU,CACZC,WAAY,EACZC,SAAU,IACVC,KAAM,WACNC,OAAQ,mCAENC,EAAY,CACd,CAAEC,UAAW,cAAiC,IAAfR,EAAU,GAAW,iBACpD,CAAEQ,UAAW,cAA2C,IAAzBR,EAAUC,EAAU,GAAU,EAAK,mBAClE,CAAEO,UAAW,cAAiC,IAAfP,EAAU,GAAW,kBAExDJ,GAAiBG,IAAYC,GAAWJ,EAAcY,SAAQ,SAAAC,GAAE,OAAIA,EAAGC,QAAQJ,EAAWL,MAI1FU,CAActB,EAAeI,GAC7BH,EAAiBG,IAIrB,OACI,yBAAKmB,UAAU,kBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBAEX5B,EAAK6B,KAAI,SAACC,EAAMC,GAAP,OAAa,yBAClBC,IAAKD,EACLH,UAAS,kBAAavB,IAAkB0B,EAAI,YAAc,IAC1DE,QAAS,kBAAM1B,EAAc,EAAIwB,KAEjC,2BAAID,EAAK5B,WAIrB,yBAAK0B,UAAU,gBACX,kBAAC,IAAD,CACIM,aAAc7B,EACd8B,YAAY,EACZC,YAAY,EACZC,gBAAgB,EAChBC,YAAY,EACZC,eAAe,GAEfvC,EAAK6B,KAAI,SAACC,EAAMC,GAAP,OAAa,yBAAKC,IAAKD,EAAGH,UAAU,eACzC,yBAAKA,UAAU,MAAMY,IAAKV,EAAK7B,MAAOwC,IAAKX,EAAK5B,gBChE7DwC,G,MAZH,WACV,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,SAAd,gCAGF,kBAAC,EAAD,SCCce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2285989d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './index.scss';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from 'react-responsive-carousel';\n\nconst data = [\n    {\n        image: \"https://source.unsplash.com/pgUbpDLJh3E/800x600\",\n        info: 'Dog',\n    },\n    {\n        image: \"https://source.unsplash.com/-81lVsfM4gQ/800x600\",\n        info: 'Cat',\n    },\n    {\n        image: \"https://source.unsplash.com/adK3Vu70DEQ/800x600\",\n        info: 'Mouse',\n    },\n    {\n        image: \"https://source.unsplash.com/5WRBRUsTqPk/800x600\",\n        info: 'Parrot',\n    },\n    {\n        image: \"https://source.unsplash.com/KvHT4dltPEQ/800x600\",\n        info: 'Rabbit'\n    }\n];\n\nconst Slider = () => {\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    \n    const animateSlider = (activeSlideIndex, newIndex) => {\n        const sliderElement = document.querySelectorAll('.slider-selection')\n        const prevPos = activeSlideIndex + 1\n        const currPos = newIndex + 1\n        const options = {\n            iterations: 1,\n            duration: 400,\n            fill: 'forwards',\n            easing: 'cubic-bezier(.19, 1, .22, 1.04)',\n        }\n        const keyframes = [\n            { transform: 'translateY(' + ((prevPos - 1) * 60) + 'px) scaleX(1)' },\n            { transform: 'translateY(' + ((prevPos + currPos - 2) * 60 / 2) + 'px) scaleX(.95)' },\n            { transform: 'translateY(' + ((currPos - 1) * 60) + 'px) scaleX(1)' }\n        ]\n        sliderElement && prevPos !== currPos && sliderElement.forEach(el => el.animate(keyframes, options))\n    };\n\n    const changeSlideTo = (slider, index) => {\n        animateSlider(selectedIndex, index);\n        setSelectedIndex(index);\n        // slider.goTo(index)\n    }\n\n    return (\n        <div className=\"slider-wrapper\">\n            <div className=\"slider-container\">\n                <div className=\"slider-column\">\n                    <div className=\"slider-selection\"></div>\n                    {\n                        data.map((item, i) => <div\n                            key={i}\n                            className={`item-row${selectedIndex === i ? \" selected\" : \"\"}`}\n                            onClick={() => changeSlideTo(\"\", i)}\n                        >\n                            <p>{item.info}</p>\n                        </div>)\n                    }\n                </div>\n                <div className=\"image-column\">\n                    <Carousel\n                        selectedItem={selectedIndex}\n                        showArrows={false}\n                        showStatus={false}\n                        showIndicators={false}\n                        showThumbs={false}\n                        dynamicHeight={true}\n                    >{\n                        data.map((item, i) => <div key={i} className=\"img-wrapper\">\n                            <img className=\"img\" src={item.image} alt={item.info} />\n                        </div>)\n                    }</Carousel>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Slider;","import React from 'react';\nimport Slider from './components/Slider';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h2 className=\"title\">Choose a pet of your choice</h2>\n      </div>\n\n      <Slider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}